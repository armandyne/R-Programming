find.package("devtools")
find.package(devtools)
q()
getwd()
add2<-function(x,y){
x+y
}
add2(1,3)
search()
Sys.time()
as.POSIXct(Sys.time())
as.POSIXlt(Sys.time())
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5==7
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6 != 8 && 4>3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6
)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[-1]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Kim","Kardashian","is","not","a","real","celebrity")
submit()
mad_libs(place="Almaty",adjective="blablah",noun="The Thing")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units = 'days')
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
ls()
rm(ls())
?rm
rm()
ls()
ls(list=ls())
rm(list = ls())
ls
ls()
getwd()
?gl
1000-(210-110)+30
log(-1)
mean(x)
traceback()
lm(1~2)
lm(y~x)
traceback()
debug(lm)
lm(y~x)
library(swirl)
swirl()
?head
head(flags)
dim(flags)
class(flags)
flags[flags$name=="Kazakhstan",]
flags[flags$name=="Kazakstan",]
flags[flags$name=="Republic of Kazakhstan",]
flags[flags$name=="Republic of the Kazakhstan",]
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
class(cls_list)
class(as.character(cls_list))
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
q<-sapply(flag_colors,sum)
class(q)
names(q)
sapply(flag_colors,mean)
q["red"]
q$red
q[["red"]]
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,length)
sapply(flags, unique)
lapply(unique_vals,function(x) x[2])
viewinfo()
sapply(flags,unique)
vapply(flags,unique, numeric(1))
ok
ok()
sapply(flags,class)
vapply(flags,class,character(1))
q<-vapply(flags,class,character(1))
class(q)
?tapply
?table
table(flags$landmass)
table(flags$animate)
table(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
x<-tapply(flags$animate, flags$landmass, mean)
sapply(x,function(w) w*100)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
iris[iris$Species=="virginica"]
iris[iris$Species=="virginica",]
iris[iris$Species=="virginica","Sepal.Length"]
mean(iris[iris$Species=="virginica","Sepal.Length"])
round(mean(iris[iris$Species=="virginica","Sepal.Length"]))
?apply
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
x<-apply(iris[, 1:4], 2, mean)
class(x)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl,mean)
View(mtcars)
x<-tapply(mtcars$mpg, mtcars$cyl,mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
y<-with(mtcars, tapply(mpg, cyl, mean))
identical(x,y)
apply(mtcars, 2, mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
sapply(mtcars[mtcars$cyl==4,mtcars$hp],mean)
sapply(mtcars[mtcars$cyl==4,"hp"],mean)
mtcars[mtcars$cyl==4,"hp"
]
mtcars[[mtcars$cyl==4,"hp"]]
mtcars[[mtcars$cyl==4]$hp
mtcars[mtcars$cyl==4]$hp
mtcars[mtcars$cyl==4,]$hp
leength(mtcars[mtcars$cyl==4,]$hp)
length(mtcars[mtcars$cyl==4,]$hp)
mean(mtcars[mtcars$cyl==4]$hp)
mtcars[mtcars$cyl==4,]$hp
x<-mtcars[mtcars$cyl==4,]$hp
mean(x)
y<-mtcars[mtcars$cyl==8,]$hp
y
round(mean(x)-mean(y))
abs(round(mean(x)-mean(y)))
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
ls()
rm(list = ls())
ls()
getwd()
setwd("D:\coursera\R Programming\Programming Assignment 2 Week 3")
setwd("D:/coursera/R Programming/Programming Assignment 2 Week 3")
getwd()
source('~/.active-rstudio-document')
makeVector(c(1,2,3,2,2,2,2,2,2))
x<-makeVector(c(1,2,3,2,2,2,2,2,2))
x
x$get()
x$getmean()
x$set()
x$setmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y<-cachemean(c(1,23,33,2,21,2))
ls()
rm(list = ls())
## creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
if(!is.matrix(x)) {
stop("Argument x is not a matrix")
}
inverted <- NULL
set <- function(y) {
x<<-y
inverted<<-NULL
}
get <- function() {
x
}
setInverted <- function(inv) {
inverted<<-inv
}
getInverted <- function() {
inverted
}
return(list(set=set, get=get, setInverted=setInverted, getInverted=getInverted))
}
cacheSolve <- function(x, ...) {
inverted<-x$getInverted()
if(!is.null(inverted)) {
message("getting cached data")
return(inverted)
}
data <- x$get()
inverted <- solve(data, ...)
x$setInverted(inverted)
inverted
}
m<-matrix(c(4,2,7,6),2,2)
m
i<-makeCacheMatrix(m)
cacheSolve(i)
cacheSolve(i)
cacheSolve(i)
cacheSolve(makeCacheMatrix(matrix(c(4,2,7,6),2,2)))
cacheSolve(makeCacheMatrix(matrix(c(4,2,7,6),2,2)))
cacheSolve(makeCacheMatrix(matrix(c(4,2,7,6),2,2)))
m<-matrix(c(4,2,7,6),2,2)
cacheSolve(makeCacheMatrix(m))
cacheSolve(makeCacheMatrix(m))
i<-makeCacheMatrix(matrix(c(4,2,7,6),2,2))
cacheSolve(i)
cacheSolve(i)
inv<-makeCacheMatrix(matrix(c(4,2,7,6),2,2))
cacheSolve(inv)
cacheSolve(inv)
