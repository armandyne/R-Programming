lm(y~x)
traceback()
debug(lm)
lm(y~x)
library(swirl)
swirl()
?head
head(flags)
dim(flags)
class(flags)
flags[flags$name=="Kazakhstan",]
flags[flags$name=="Kazakstan",]
flags[flags$name=="Republic of Kazakhstan",]
flags[flags$name=="Republic of the Kazakhstan",]
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
class(cls_list)
class(as.character(cls_list))
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
q<-sapply(flag_colors,sum)
class(q)
names(q)
sapply(flag_colors,mean)
q["red"]
q$red
q[["red"]]
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,length)
sapply(flags, unique)
lapply(unique_vals,function(x) x[2])
viewinfo()
sapply(flags,unique)
vapply(flags,unique, numeric(1))
ok
ok()
sapply(flags,class)
vapply(flags,class,character(1))
q<-vapply(flags,class,character(1))
class(q)
?tapply
?table
table(flags$landmass)
table(flags$animate)
table(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
x<-tapply(flags$animate, flags$landmass, mean)
sapply(x,function(w) w*100)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
iris[iris$Species=="virginica"]
iris[iris$Species=="virginica",]
iris[iris$Species=="virginica","Sepal.Length"]
mean(iris[iris$Species=="virginica","Sepal.Length"])
round(mean(iris[iris$Species=="virginica","Sepal.Length"]))
?apply
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
x<-apply(iris[, 1:4], 2, mean)
class(x)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl,mean)
View(mtcars)
x<-tapply(mtcars$mpg, mtcars$cyl,mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
y<-with(mtcars, tapply(mpg, cyl, mean))
identical(x,y)
apply(mtcars, 2, mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
sapply(mtcars[mtcars$cyl==4,mtcars$hp],mean)
sapply(mtcars[mtcars$cyl==4,"hp"],mean)
mtcars[mtcars$cyl==4,"hp"
]
mtcars[[mtcars$cyl==4,"hp"]]
mtcars[[mtcars$cyl==4]$hp
mtcars[mtcars$cyl==4]$hp
mtcars[mtcars$cyl==4,]$hp
leength(mtcars[mtcars$cyl==4,]$hp)
length(mtcars[mtcars$cyl==4,]$hp)
mean(mtcars[mtcars$cyl==4]$hp)
mtcars[mtcars$cyl==4,]$hp
x<-mtcars[mtcars$cyl==4,]$hp
mean(x)
y<-mtcars[mtcars$cyl==8,]$hp
y
round(mean(x)-mean(y))
abs(round(mean(x)-mean(y)))
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
str(str())
str(str
)
str(lm)
x<-rnorm(100,2,4)
x
str(rnorm)
str(x)
summary(x)
library(datasets)
airquality
?split
split(airquality,airquality$Month)
s<-split(airquality,airquality$Month)
str(s)
rnorm(10)
abs(rnorm(10))
x<-rnorm(10)
x
x<-rnorm(10)
x
x<-rnorm(10)
x
summary(x)
x<-rnorm(100)
summary(x)
x
x<-rnorm(10,7,1)
x
summary(x)
x<-rnorm(10,7,5)
x
summary(x)
set.seed(20)
x<-rnorm(100)
e<-rnoorm(100,0,2)
e<-rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y)
set.seed(10)
x<-rbinom(100,1,0.5)
e<-rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu<-0.5+0.3*x
y<-rpois(100,exp(log.mu))
summary(y)
plot(x,y)
sample(1:10,3)
sample(1:10,3,replace = TRUE)
sample(1:10,3,replace = TRUE)
sample(1:10,3,replace = TRUE)
sample(1:10,3)
sample(c(1,2,3,2,2,1,3,2),3)
sample(c(1,2,3,2,2,1,3,2),3)
sample(c(1,2,3,2,2,1,3,2),3)
c<-readline("boo")
c<-readline("boo ")
c<-readline("boo:")
find.package(devtools)
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS,26)
sample(LETTERS)
flips<-sample(c(0,1),100,prob = c(0.3,0.7),replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1,size = 100, prob = 0.7)
flips<-rbinom(1,100,0.7)
flips<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean = 100,sd=25)
?rpois
rpois(5,10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(y=cars$speed,x=cars$dist,xlab = "Speed")
plot(x=cars$speed,y=cars$dist,xlab = "Speed")
plot(x=cars$speed,y=cars$dist,xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab = "Speed", ylab = "Stopping Distance")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,col=2,xlim=c(10,15))
plot(cars,xlim=c(10,15))
?points
plot(cars,pch=2)
data(mtcars)
play()
dim(mtcars)
names(mtcars)
head(mtcars)
summary(mtcars)
str(mtcars)
object.size(mtcars)
mtcars
mtcars[1]
nxt()
?boxplot
boxplot(formula = mpg ~ cyl,data=mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
mtcars
subset(mtcars,cyl==6L)
subset(mtcars,cyl==6L)$hp
ls()
rm(list=ls())
ls()
getwd
getwd()
setwd("D:/coursera/R Programming/Programming Assignment 3 Week 4")
hospital-data<-read.csv("data/hospital-data.csv")
hospital.data<-read.csv("data/hospital-data.csv")
care.measures<-read.csv("data/outcome-of-care-measures.csv")
head(hospital.data)
head(care.measures)
summary(hospital.data)
summary(care.measures)
names(hospital.data)
names(care.measures)
str(hospital.data)
str(care.measures)
object.size(hospital.data)
object.size(care.measures)
table
table(hospital.data)
table(hospital.data$City)
names(care.measures)
names(hospital.data)
outcome<-read.csv("data/outcome-of-care-measures.csv")
outcome<-read.csv("data/outcome-of-care-measures.csv",colClasses = "character")
head(outcome)
names(outcome)
outcome[,11]
outcome[,11]<-as.numeric(outcome[,11])
outcome[,11]
hist(outcome[,11])
View(care.measures)
View(hospital.data)
View(hospital.data)
View(outcome)
View(outcome)
summary(hospital.data)
levels(outcome$State)
class(outcome$State)
factor(outcome$State)
levels(factor(outcome$State))
?any
?all
any("TX"==c("BB","TT","NY"))
any("TX"==c("BB","TX","NY"))
toupper("dd")
toupper("DD")
toupper(c("dd"))
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
if(!any(tolower(outcome)==c("heart attack","heart failure","pneumonia"))){
stop("invalid outcome")
}
outcome.data<-read.csv("data/outcome-of-care-measures.csv")
head(outcome.data,1)
}
best("TX","d")
best("TX","d")
best("TX","pneumonia")
head(outcome.data$Hospital.Name,1)
best("TX","pneumonia")
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX","pneumonia")
best("TX","Pneumonia")
best("TX","Pneuonia")
names(outcome)
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX","Pneuonia")
best("TX","Pneumonia")
best("TX","heart")
best("TX","heart failure")
outcome[!is.na(outcome[11]),11]
outcome[!is.na(outcome[11]),]
outcome[!is.na(outcome[11]),]$State
unique(outcome[!is.na(outcome[11]),]$State)
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX","heart failure")
tmp<-unique(outcome[!is.na(outcome[11]),]$State)
class(tmp)
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX","heart failure")
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX","heart failure")
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX","heart failure")
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX","heart failure")
best("T","heart failure")
best("T","heat failure")
best("T","heart failure")
outcome[!is.na(outcome[11]),]
outcome[!is.na(outcome[11] && outcome$State=="TX"),c(2,11)]
outcome[!is.na(outcome[11] & outcome$State=="TX"),c(2,11)]
?subset(outcome,)
subset(outcome,!is.na(outcome[11]),select = c(2,11))
subset(outcome,!is.na(outcome[11]) && outcome$State=="TX",select = c(2,11))
outcome[!is.na(outcome[11] & outcome$State=="TX"),]
tmp<-outcome[!is.na(outcome[11] & outcome$State=="TX"),]
View(tmp)
View(tmp)
tmp<-outcome[!is.na(outcome[11] && outcome$State=="TX"),]
tmp<-outcome[!is.na(outcome[11]),"State"]
tmp
unique(tmp)
tmp
tmp<-outcome[!is.na(outcome[11]),c(2,11,7)]
tmp
nrow(tmp)
tmp[tmp$State=="TX"]
tmp[tmp$State=="TX",]
nrow(tmp[tmp$State=="TX",])
nrow(subset(outcome,!is.na(outcome[11]),select = c(2,11)))
nrow(subset(outcome,!is.na(outcome[11]), outcome$State="TX",select = c(2,11)))
nrow(subset(outcome,!is.na(outcome[11]), outcome$State=="TX",select = c(2,11)))
subset(outcome[!is.na(outcome[11],],outcome$State=="TX",select="Hospital.Name")
subset(outcome[!is.na(outcome[11]),],outcome$State=="TX",select="Hospital.Name")
tmp<-subset(outcome[!is.na(outcome[11]),],outcome$State=="TX",select="Hospital.Name")
tmp
names(tmp)
nrow(tmp)
tmp<-outcome[!is.na(outcome[11]),]
tmp
tmp<-subset(tmp,tmp$State=="TX",c(2,11))
tmp
nrow(tmp)
tmp<-outcome[!is.na(outcome[[11]] && outcome$State=="TX"),]
tmp
tmp<-outcome[!is.na(outcome[[11]] & outcome$State=="TX"),]
nrow(tmp)
tmp<-outcome[!is.na(outcome[[11]]) & (outcome$State=="TX"),]
nrow(tmp)
tmp<-outcome[!is.na(outcome[[11]]) && (outcome$State=="TX"),]
nrow(tmp)
tmp<-outcome[!is.na(outcome[11]) & (outcome$State=="TX"),]
nrow(tmp)
tmp<-outcome[!is.na(outcome[11]) & (outcome$State=="TX"),c(2,11)]
tmp
names(tmp)
names(tmp)[[2]]<-"Heart"
tmp
min(tmp$Heart)
sort(tmp)
?sort
class(tmp)
as.list(tmp)
sort(tmp)
sort(as.list(tmp))
order(tmp)
tmp
tmp<-tmp[order(tmp$Heart, tmp$Hospital.Name)]
tmp<-tmp[order(Heart, Hospital.Name)]
tmp<-tmp[order("Heart", "Hospital.Name")]
tmp
tmp
tmp<-outcome[!is.na(outcome[11]) & (outcome$State=="TX"),c(2,11)]
names(tmp)[[2]]<-"Heart"
tmp
tmp<-tmp[order("Heart", "Hospital.Name"),]
tmp
tmp<-outcome[!is.na(outcome[11]) & (outcome$State=="TX"),c(2,11)]
names(tmp)[[2]]<-"Heart"
tmp
nrow(tmp)
tmp[order(tmp[,2],tmp[,1])]
tmp[order(tmp[,2],tmp[,1]),]
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX", "heart attack")
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
tmp<-outcome[!is.na(outcome[17]),c(2,17,7)]
View(tmp)
View(tmp)
tmp<-tmp[tmp$State=="TX"]
tmp<-tmp[tmp$State=="TX",]
View(tmp)
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX", "heart failure")
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX", "heart failure")
?as.numeric
outcome[,11] <- as.numeric(outcome[,11])
outcome[,17] <- as.numeric(outcome[,17])
outcome[,23] <- as.numeric(outcome[,23])
outcome<-read.csv("data/outcome-of-care-measures.csv")
outcome[,c(11,17,23)] <- as.numeric(outcome[,c(11,17,23)])
outcome[,23 & 11] <- as.numeric(outcome[,23 & 11])
outcome[,23 && 11] <- as.numeric(outcome[,23 && 11])
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX", "heart failure")
tmp<-read.csv("data/outcome-of-care-measures.csv")
tmp[,17]<-as.numeric(tmp[,17])
tmp<-tmp[tmp$State=="TX",c(2,17)]
tmp<-tmp[!is.na(tmp[17])]
tmp<-tmp[!is.na(tmp[17]),]
tmp<-tmp[!is.na(tmp[2]),]
tmp
View(tmp)
View(tmp)
best("MD", "heart attack")
best("MD", "pneumonia")
best("TX", "heart failure")
tmp<-read.csv("data/outcome-of-care-measures.csv")
tmp<-tmp[tmp$State=="TX",c(2,17)]
tmp<-read.csv("data/outcome-of-care-measures.csv")
View(tmp)
View(tmp)
names(tmp)
tmp[,17]<-as.numeric(tmp[,17])
tmp<-tmp[,c(2,7,17)]
View(tmp)
View(tmp)
tmp<-tmp[tmp$State=="TX",]
View(tmp)
View(tmp)
names(tmp[,3])<-"failure"
View(tmp)
View(tmp)
names(tmp)[3]<-"failure"
View(tmp)
View(tmp)
tmp<-read.csv("data/outcome-of-care-measures.csv")
tmp<-tmp[tmp$State=="TX",c(2,7,17)]
tmp
View(tmp)
View(tmp)
names(tmp)[3]<-"failure"
View(tmp)
View(tmp)
tmp[,3]<-as.numeric(tmp[,3])
View(tmp)
View(tmp)
tmp<-read.csv("data/outcome-of-care-measures.csv")
tmp<-tmp[tmp$State=="TX",c(2,7,17)]
names(tmp)[3]<-"failure"
View(tmp)
View(tmp)
class(tmp$failure)
source('D:/coursera/R Programming/Programming Assignment 3 Week 4/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
